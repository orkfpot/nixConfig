# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "nvme" "usb_storage" "rtsx_usb_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/5a8fb698-8b59-4d4d-a22c-7db50c0a988c";
      fsType = "ext4";
    };

  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-uuid/4744-2E78";
      fsType = "vfat";
    };

  # fileSystems."/var/lib/lxcfs" =
  #   { device = "lxcfs";
  #     fsType = "fuse.lxcfs";
  #   };

  # fileSystems."/home/ignas" =
  #   { device = "/home/ignas/.Private";
  #     fsType = "ecryptfs";
  #   };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.lxcbr0.useDHCP = lib.mkDefault true;
  # networking.interfaces.tailscale0.useDHCP = lib.mkDefault true;
  # networking.interfaces.virbr0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # audio

  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;

#    extraConfig.pipewire = {
#      "91-null-sinks" = {
#        context.objects = [
#          {
#            factory = "spa-node-factory";
#            args = {
#              factory.name      = "support.node.driver";
#              node.name         = "Dummmy-Driver";
#              priority.driver   = 8000;
#            };
#          }
#          {
#            factory = "adapter";
#            args = {
#              factory.name      = "support.null-audio-sink";
#              node.name         = "Microphone-Proxy";
#              node.description  = "Microphone";
#              media.class       = "Audio/Source/Visual";
#              audio.position    = "MONO";
#            };
#          }
#          {
#            factory = "adapter";
#            args = {
#              factory.name      = "support.null-audio-sink";
#              node.name         = "Main-Output-Proxy";
#              node.description  = "Main-Output";
#              media.class       = "Audio/Sink";
#              audio.position    = "FL,FR";
#            };
#          }
#        ];
#      };
#    };

  };

  hardware = {
#    pulseaudio = {
#      enable = false;
#      package = pkgs.pulseaudioFull;
#      extraConfig = "load-module module-switch-on-connect";
#    };

    # bluetooth
    bluetooth = {
      enable = true;
      settings.General.Enable = "Source,Sink,Media,Socket";
    };
  };
}
